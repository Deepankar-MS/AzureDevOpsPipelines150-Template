# parameters values will be passed from the main/parent yaml template.
parameters:
  environment: dev
  environmentDisplayName: Development
  backendServiceArm: ''
  backendAzureRmResourceGroupName: 'rg-terraform-state'
  backendAzureRmStorageAccountName: 'tfstate20250923db'
  backendAzureRmContainerName: 'tfstate'
  backendAzureRmKey: 'dev.tfstate'
  workingDirectory: 'terraform'
  location: 'westeurope'
  anyTfChanges: false
  dependsOn: []

stages:
- stage: ${{ parameters.environment }}
  displayName: Deploy to ${{ parameters.environmentDisplayName }}
  dependsOn: ${{ parameters.dependsOn }}
  jobs:
  - job: Terraform_Plan
    displayName: Terraform Init, Plan & Apply
    pool:
      vmImage: ubuntu-latest

    steps:
    - task: Bash@3
      displayName: Install Terraform v1.5.7
      inputs:
        targetType: 'inline'
        script: |
          # Check if Terraform is already installed with correct version
          if command -v terraform &> /dev/null; then
            CURRENT_VERSION=$(terraform version -json | jq -r '.terraform_version' 2>/dev/null || echo "unknown")
            if [ "$CURRENT_VERSION" = "1.5.7" ]; then
              echo "Terraform v1.5.7 is already installed"
              terraform version
              exit 0
            fi
          fi
          
          echo "Installing Terraform v1.5.7..."
          
          # Download Terraform
          TERRAFORM_VERSION="1.5.7"
          DOWNLOAD_URL="https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
          
          echo "Downloading from: $DOWNLOAD_URL"
          
          # Clean up any existing files/directories that might conflict
          rm -f terraform.zip
          # Handle both file and directory cases for 'terraform'
          if [ -f terraform ]; then
            rm -f terraform
          elif [ -d terraform ]; then
            echo "Found terraform directory, working around it..."
          fi
          
          # Download and extract to a temporary name first
          curl -fsSL "$DOWNLOAD_URL" -o terraform.zip
          unzip -o terraform.zip terraform -d /tmp/
          
          # Make executable and move to PATH
          chmod +x /tmp/terraform
          sudo mv /tmp/terraform /usr/local/bin/terraform
          
          # Clean up
          rm -f terraform.zip
          
          # Verify installation
          echo "Terraform installation completed:"
          terraform version

    - task: AzureCLI@2
      displayName: terraform init with Azure backend
      inputs:
        azureSubscription: ${{ parameters.backendServiceArm }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: ${{ parameters.workingDirectory }}
        addSpnToEnvironment: true
        inlineScript: |
          # Debug: Check what variables are available
          echo "=== Available Service Principal Variables ==="
          echo "servicePrincipalId: ${servicePrincipalId:-NOT_SET}"
          echo "servicePrincipalKey: ${servicePrincipalKey:+SET (length: ${#servicePrincipalKey})}${servicePrincipalKey:-NOT_SET}"
          echo "tenantId: ${tenantId:-NOT_SET}"
          echo "idToken: ${idToken:+SET (length: ${#idToken})}${idToken:-NOT_SET}"
          echo "================================================"
          
          # Set authentication variables
          export ARM_CLIENT_ID="${servicePrincipalId:-$ARM_CLIENT_ID}"
          export ARM_TENANT_ID="${tenantId:-$ARM_TENANT_ID}"
          export ARM_SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          export ARM_USE_CLI=false
          export ARM_USE_MSI=false
          
          # Check if we have a client secret (Service Principal manual) or token (Workload Identity Federation)
          if [[ -n "${servicePrincipalKey:-}" ]]; then
            echo "Using Service Principal (manual) authentication"
            export ARM_CLIENT_SECRET="$servicePrincipalKey"
            export ARM_USE_OIDC=false
          elif [[ -n "${idToken:-}" ]]; then
            echo "Using Workload Identity Federation (OIDC) authentication"
            export ARM_OIDC_TOKEN="$idToken"
            export ARM_USE_OIDC=true
          else
            echo "ERROR: Neither servicePrincipalKey nor idToken is available"
            echo "Please check your Azure DevOps service connection configuration"
            echo "It should be either:"
            echo "1. Service Principal (manual) with client secret"
            echo "2. Workload Identity Federation"
            exit 1
          fi
          
          # Display authentication info (without secrets)
          echo "=== Final Authentication Configuration ==="
          echo "ARM_CLIENT_ID: $ARM_CLIENT_ID"
          echo "ARM_TENANT_ID: $ARM_TENANT_ID"
          echo "ARM_SUBSCRIPTION_ID: $ARM_SUBSCRIPTION_ID"
          echo "ARM_USE_CLI: $ARM_USE_CLI"
          echo "ARM_USE_MSI: $ARM_USE_MSI"
          echo "ARM_USE_OIDC: ${ARM_USE_OIDC:-false}"
          echo "ARM_CLIENT_SECRET: ${ARM_CLIENT_SECRET:+SET (length: ${#ARM_CLIENT_SECRET})}${ARM_CLIENT_SECRET:-NOT_SET}"
          echo "ARM_OIDC_TOKEN: ${ARM_OIDC_TOKEN:+SET (length: ${#ARM_OIDC_TOKEN})}${ARM_OIDC_TOKEN:-NOT_SET}"
          echo "=============================================="
          
          # Force OIDC authentication for backend (disable key-based auth)
          export ARM_USE_AZUREAD=true
          export ARM_STORAGE_USE_AZUREAD=true
          
          # Configure terraform init with OIDC backend authentication
          terraform init \
            -backend-config="resource_group_name=${{ parameters.backendAzureRmResourceGroupName }}" \
            -backend-config="storage_account_name=${{ parameters.backendAzureRmStorageAccountName }}" \
            -backend-config="container_name=${{ parameters.backendAzureRmContainerName }}" \
            -backend-config="key=${{ parameters.backendAzureRmKey }}" \
            -backend-config="use_oidc=true" \
            -backend-config="use_azuread_auth=true"

    - task: AzureCLI@2
      displayName: terraform validate
      inputs:
        azureSubscription: ${{ parameters.backendServiceArm }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: ${{ parameters.workingDirectory }}
        addSpnToEnvironment: true
        inlineScript: |
          # Set authentication variables
          export ARM_CLIENT_ID="${servicePrincipalId:-$ARM_CLIENT_ID}"
          export ARM_TENANT_ID="${tenantId:-$ARM_TENANT_ID}"
          export ARM_SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          export ARM_USE_CLI=false
          export ARM_USE_MSI=false
          
          # Configure authentication method based on available credentials
          if [[ -n "${servicePrincipalKey:-}" ]]; then
            export ARM_CLIENT_SECRET="$servicePrincipalKey"
            export ARM_USE_OIDC=false
          elif [[ -n "${idToken:-}" ]]; then
            export ARM_OIDC_TOKEN="$idToken"
            export ARM_USE_OIDC=true
          fi
          
          terraform validate

    - task: AzureCLI@2
      displayName: terraform plan -var environment=${{ parameters.environment }} -out=${{ parameters.backendAzureRmKey }}
      inputs:
        azureSubscription: ${{ parameters.backendServiceArm }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: ${{ parameters.workingDirectory }}
        addSpnToEnvironment: true
        inlineScript: |
          # Set authentication variables
          export ARM_CLIENT_ID="${servicePrincipalId:-$ARM_CLIENT_ID}"
          export ARM_TENANT_ID="${tenantId:-$ARM_TENANT_ID}"
          export ARM_SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          export ARM_USE_CLI=false
          export ARM_USE_MSI=false
          
          # Configure authentication method based on available credentials
          if [[ -n "${servicePrincipalKey:-}" ]]; then
            export ARM_CLIENT_SECRET="$servicePrincipalKey"
            export ARM_USE_OIDC=false
          elif [[ -n "${idToken:-}" ]]; then
            export ARM_OIDC_TOKEN="$idToken"
            export ARM_USE_OIDC=true
          fi
          
          # Force OIDC authentication for backend storage
          export ARM_USE_AZUREAD=true
          export ARM_STORAGE_USE_AZUREAD=true
          
          terraform plan -var environment=${{ parameters.environment }} -out=${{ parameters.backendAzureRmKey }}

    - task: PowerShell@2
      displayName: detect any terraform change in the plan
      inputs:
        workingDirectory: ${{ parameters.workingDirectory }}
        targetType: 'inline'
        script: |
          try {
            $plan = $(terraform show -json ${{ parameters.backendAzureRmKey }} | ConvertFrom-Json)
            $actions = $plan.resource_changes.change.actions
            Write-Host "Terraform actions : $actions"
            if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update'))
            {
              Write-Host "Terraform will perform the following actions : $actions"
              Write-Host "##vso[task.setvariable variable=anyTfChanges;]true"
            }
            else
            {
              Write-Host "There is no change detected in Terraform tfplan file"
              Write-Host "##vso[task.setvariable variable=anyTfChanges;]false"
            }
          }
          catch {
            Write-Error "Error analyzing Terraform plan: $_"
            Write-Host "##vso[task.setvariable variable=anyTfChanges;]false"
            exit 1
          }

    - task: AzureCLI@2
      displayName: terraform apply ${{ parameters.backendAzureRmKey }}
      condition: eq(variables.anyTfChanges, true)
      inputs:
        azureSubscription: ${{ parameters.backendServiceArm }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: ${{ parameters.workingDirectory }}
        addSpnToEnvironment: true
        inlineScript: |
          # Set authentication variables
          export ARM_CLIENT_ID="${servicePrincipalId:-$ARM_CLIENT_ID}"
          export ARM_TENANT_ID="${tenantId:-$ARM_TENANT_ID}"
          export ARM_SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          export ARM_USE_CLI=false
          export ARM_USE_MSI=false
          
          # Configure authentication method based on available credentials
          if [[ -n "${servicePrincipalKey:-}" ]]; then
            export ARM_CLIENT_SECRET="$servicePrincipalKey"
            export ARM_USE_OIDC=false
          elif [[ -n "${idToken:-}" ]]; then
            export ARM_OIDC_TOKEN="$idToken"
            export ARM_USE_OIDC=true
          fi
          
          # Force OIDC authentication for backend storage
          export ARM_USE_AZUREAD=true
          export ARM_STORAGE_USE_AZUREAD=true
          
          terraform apply -auto-approve ${{ parameters.backendAzureRmKey }}
