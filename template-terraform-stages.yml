# parameters values will be passed from the main/parent yaml template.
parameters:
  environment: dev
  environmentDisplayName: Development
  backendServiceArm: ''
  backendAzureRmResourceGroupName: 'rg-terraform-state'
  backendAzureRmStorageAccountName: 'tfstate20250923db'
  backendAzureRmContainerName: 'tfstate'
  backendAzureRmKey: 'dev.tfstate'
  workingDirectory: 'terraform'
  anyTfChanges: false
  dependsOn: []

stages:

- stage: ${{ parameters.environment }}
  displayName: Deploy to ${{ parameters.environmentDisplayName }}
  dependsOn: ${{ parameters.dependsOn }}
  jobs:
  - job: Terraform_Plan
    displayName: Terraform Init, Plan & Apply
    pool:
      vmImage: ubuntu-latest

    steps:
    
    - task: Bash@3
      displayName: Install Terraform v1.5.7
      inputs:
        targetType: 'inline'
        script: |
          # Check if Terraform is already installed with correct version
          if command -v terraform &> /dev/null; then
            CURRENT_VERSION=$(terraform version -json | jq -r '.terraform_version' 2>/dev/null || echo "unknown")
            if [ "$CURRENT_VERSION" = "1.5.7" ]; then
              echo "Terraform v1.5.7 is already installed"
              terraform version
              exit 0
            fi
          fi
          
          echo "Installing Terraform v1.5.7..."
          
          # Download Terraform
          TERRAFORM_VERSION="1.5.7"
          DOWNLOAD_URL="https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
          
          echo "Downloading from: $DOWNLOAD_URL"
          
          # Clean up any existing files
          rm -f terraform.zip terraform
          
          # Download and extract
          curl -fsSL "$DOWNLOAD_URL" -o terraform.zip
          unzip -o terraform.zip
          
          # Make executable and move to PATH
          chmod +x terraform
          sudo mv terraform /usr/local/bin/
          
          # Verify installation
          echo "Terraform installation completed:"
          terraform version
    
    - task: AzureCLI@2
      displayName: terraform init with Azure backend
      inputs:
        azureSubscription: ${{ parameters.backendServiceArm }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: ${{ parameters.workingDirectory }}
        inlineScript: |
          terraform init \
            -backend-config="resource_group_name=${{ parameters.backendAzureRmResourceGroupName }}" \
            -backend-config="storage_account_name=${{ parameters.backendAzureRmStorageAccountName }}" \
            -backend-config="container_name=${{ parameters.backendAzureRmContainerName }}" \
            -backend-config="key=${{ parameters.backendAzureRmKey }}"
    
    - task: AzureCLI@2
      displayName: terraform validate
      inputs:
        azureSubscription: ${{ parameters.backendServiceArm }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: ${{ parameters.workingDirectory }}
        inlineScript: |
          terraform validate
    
    - task: AzureCLI@2
      displayName: terraform plan -var environment=${{ parameters.environment }} -out=${{ parameters.backendAzureRmKey }}
      inputs:
        azureSubscription: ${{ parameters.backendServiceArm }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: ${{ parameters.workingDirectory }}
        inlineScript: |
          terraform plan -var environment=${{ parameters.environment }} -out=${{ parameters.backendAzureRmKey }}
    
    - task: PowerShell@2
      displayName: detect any terraform change in the plan
      inputs:
        workingDirectory: ${{ parameters.workingDirectory }}
        targetType: 'inline'
        script: |
          try {
            $plan = $(terraform show -json ${{ parameters.backendAzureRmKey }} | ConvertFrom-Json)
            $actions = $plan.resource_changes.change.actions
            Write-Host "Terraform actions : $actions"
            if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update'))
            {
              Write-Host "Terraform will perform the following actions : $actions"
              Write-Host "##vso[task.setvariable variable=anyTfChanges;]true"
            }
            else
            {
              Write-Host "There is no change detected in Terraform tfplan file"
              Write-Host "##vso[task.setvariable variable=anyTfChanges;]false"
            }
          }
          catch {
            Write-Error "Error analyzing Terraform plan: $_"
            Write-Host "##vso[task.setvariable variable=anyTfChanges;]false"
            exit 1
          }
    
    - task: AzureCLI@2
      displayName: terraform apply ${{ parameters.backendAzureRmKey }}
      condition: eq(variables.anyTfChanges, true)
      inputs:
        azureSubscription: ${{ parameters.backendServiceArm }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: ${{ parameters.workingDirectory }}
        inlineScript: |
          terraform apply -auto-approve ${{ parameters.backendAzureRmKey }}
