# parameters values will be passed from the main/parent yaml template.
parameters:
  environment: terraform_backend_tfstate
  environmentDisplayName: Terraform Backend
  backendServiceArm: ''
  backendAzureRmResourceGroupName: 'rg-terraform-state'
  backendAzureRmStorageAccountName: 'tfstate20250923db'
  backendAzureRmContainerName: 'tfstate'
  location: 'westeurope'
  dependsOn: []
  
stages:

- stage: ${{ parameters.environment }}
  displayName: ${{ parameters.environmentDisplayName }}
  dependsOn: []
  jobs:
  - job: Create_TF_Backend
    displayName: TF Backend to save State
    pool:
      vmImage: ubuntu-latest

    steps:
    - task: AzureCLI@2
      displayName: Create Storage Container for tfstate
      inputs:
        azureSubscription: ${{ parameters.backendServiceArm }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        addSpnToEnvironment: true
        inlineScript: |
          # Get service principal ID for permissions assignment
          SP_ID="${servicePrincipalId:-$ARM_CLIENT_ID}"
          SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          
          echo "Service Principal ID: $SP_ID"
          echo "Subscription ID: $SUBSCRIPTION_ID"
          
          # Create the resource group (if it doesn't exist)
          if ! az group show --name ${{ parameters.backendAzureRmResourceGroupName }} >/dev/null 2>&1; then
            echo "Creating resource group ${{ parameters.backendAzureRmResourceGroupName }}..."
            az group create \
               -n ${{ parameters.backendAzureRmResourceGroupName }} \
               -l ${{ parameters.location }}
            echo "Resource group ${{ parameters.backendAzureRmResourceGroupName }} created."
          else
            echo "Resource group ${{ parameters.backendAzureRmResourceGroupName }} already exists."
          fi
           
          # Create the storage account (if it doesn't exist)
          if ! az storage account show --name ${{ parameters.backendAzureRmStorageAccountName }} --resource-group ${{ parameters.backendAzureRmResourceGroupName }} >/dev/null 2>&1; then
            echo "Creating storage account ${{ parameters.backendAzureRmStorageAccountName }}..."
            az storage account create \
              -g ${{ parameters.backendAzureRmResourceGroupName }} \
              -l ${{ parameters.location }} \
              --name ${{ parameters.backendAzureRmStorageAccountName }} \
              --sku Standard_LRS \
              --encryption-services blob
            echo "Storage account ${{ parameters.backendAzureRmStorageAccountName }} created."
          else
            echo "Storage account ${{ parameters.backendAzureRmStorageAccountName }} already exists."
          fi
          
          # === ENHANCED PERMISSION ASSIGNMENT ===
          echo "🔐 Configuring storage account permissions..."
          echo "Service Principal ID: $SP_ID"
          echo "Storage Account: ${{ parameters.backendAzureRmStorageAccountName }}"
          echo "Resource Group: ${{ parameters.backendAzureRmResourceGroupName }}"
          
          # Storage Account Contributor (for account-level operations)
          echo "Assigning Storage Account Contributor role..."
          STORAGE_SCOPE="/subscriptions/$SUBSCRIPTION_ID/resourceGroups/${{ parameters.backendAzureRmResourceGroupName }}/providers/Microsoft.Storage/storageAccounts/${{ parameters.backendAzureRmStorageAccountName }}"
          
          if az role assignment create --assignee "$SP_ID" --role "Storage Account Contributor" --scope "$STORAGE_SCOPE" 2>/dev/null; then
            echo "✅ Storage Account Contributor role assigned successfully"
          else
            echo "ℹ️  Storage Account Contributor role may already exist"
          fi
          
          # Storage Blob Data Contributor (for blob operations with OIDC)
          echo "Assigning Storage Blob Data Contributor role..."
          if az role assignment create --assignee "$SP_ID" --role "Storage Blob Data Contributor" --scope "$STORAGE_SCOPE" 2>/dev/null; then
            echo "✅ Storage Blob Data Contributor role assigned successfully"
          else
            echo "ℹ️  Storage Blob Data Contributor role may already exist"
          fi
          
          # Verify role assignments
          echo "🔍 Verifying role assignments..."
          echo "Current role assignments for service principal on storage account:"
          az role assignment list --assignee "$SP_ID" --scope "$STORAGE_SCOPE" --query "[].{Role:roleDefinitionName,Scope:scope}" -o table || echo "Could not retrieve role assignments"
           
          # Wait a moment for permissions to propagate
          echo "Waiting for permissions to propagate..."
          sleep 30
          
          # Retrieve the storage account key
          echo "Retrieving storage account key..."
          ACCOUNT_KEY=$(az storage account keys list --resource-group ${{ parameters.backendAzureRmResourceGroupName }} --account-name ${{ parameters.backendAzureRmStorageAccountName }} --query [0].value -o tsv)
           
          echo "Storage account key retrieved successfully."
           
          # Create a storage container (for the Terraform State) if it doesn't exist
          if ! az storage container show --name ${{ parameters.backendAzureRmContainerName }} --account-name ${{ parameters.backendAzureRmStorageAccountName }} --account-key $ACCOUNT_KEY >/dev/null 2>&1; then
            echo "Creating storage container ${{ parameters.backendAzureRmContainerName }}..."
            az storage container create \
               --name ${{ parameters.backendAzureRmContainerName }} \
               --account-name ${{ parameters.backendAzureRmStorageAccountName }} \
               --account-key $ACCOUNT_KEY
            echo "Storage container ${{ parameters.backendAzureRmContainerName }} created."
          else
            echo "Storage container ${{ parameters.backendAzureRmContainerName }} already exists."
          fi
          
          echo "Terraform backend setup completed successfully!"
